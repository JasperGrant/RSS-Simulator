// Generated by gencpp from file solenoid_ctrl/solenoid_status.msg
// DO NOT EDIT!


#ifndef SOLENOID_CTRL_MESSAGE_SOLENOID_STATUS_H
#define SOLENOID_CTRL_MESSAGE_SOLENOID_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace solenoid_ctrl
{
template <class ContainerAllocator>
struct solenoid_status_
{
  typedef solenoid_status_<ContainerAllocator> Type;

  solenoid_status_()
    : sol_ctrl(false)
    , sol_bear(false)
    , sol_thrust()  {
    }
  solenoid_status_(const ContainerAllocator& _alloc)
    : sol_ctrl(false)
    , sol_bear(false)
    , sol_thrust(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _sol_ctrl_type;
  _sol_ctrl_type sol_ctrl;

   typedef uint8_t _sol_bear_type;
  _sol_bear_type sol_bear;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _sol_thrust_type;
  _sol_thrust_type sol_thrust;





  typedef boost::shared_ptr< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> const> ConstPtr;

}; // struct solenoid_status_

typedef ::solenoid_ctrl::solenoid_status_<std::allocator<void> > solenoid_status;

typedef boost::shared_ptr< ::solenoid_ctrl::solenoid_status > solenoid_statusPtr;
typedef boost::shared_ptr< ::solenoid_ctrl::solenoid_status const> solenoid_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::solenoid_ctrl::solenoid_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::solenoid_ctrl::solenoid_status_<ContainerAllocator1> & lhs, const ::solenoid_ctrl::solenoid_status_<ContainerAllocator2> & rhs)
{
  return lhs.sol_ctrl == rhs.sol_ctrl &&
    lhs.sol_bear == rhs.sol_bear &&
    lhs.sol_thrust == rhs.sol_thrust;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::solenoid_ctrl::solenoid_status_<ContainerAllocator1> & lhs, const ::solenoid_ctrl::solenoid_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace solenoid_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f071f78c9fde6c43f4fb013e9d377f82";
  }

  static const char* value(const ::solenoid_ctrl::solenoid_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf071f78c9fde6c43ULL;
  static const uint64_t static_value2 = 0xf4fb013e9d377f82ULL;
};

template<class ContainerAllocator>
struct DataType< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "solenoid_ctrl/solenoid_status";
  }

  static const char* value(const ::solenoid_ctrl::solenoid_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Reports the solenoid and control state of the solenoid_ctrl package\n"
"bool sol_ctrl        # indicates whether key_sub is in control mode\n"
"bool sol_bear        # indicates the status of the air bearing solenoid valve\n"
"int16[] sol_thrust   # indicates the status of the thruster air bearings\n"
"\n"
;
  }

  static const char* value(const ::solenoid_ctrl::solenoid_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sol_ctrl);
      stream.next(m.sol_bear);
      stream.next(m.sol_thrust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct solenoid_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::solenoid_ctrl::solenoid_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::solenoid_ctrl::solenoid_status_<ContainerAllocator>& v)
  {
    s << indent << "sol_ctrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sol_ctrl);
    s << indent << "sol_bear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sol_bear);
    s << indent << "sol_thrust[]" << std::endl;
    for (size_t i = 0; i < v.sol_thrust.size(); ++i)
    {
      s << indent << "  sol_thrust[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.sol_thrust[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOLENOID_CTRL_MESSAGE_SOLENOID_STATUS_H
